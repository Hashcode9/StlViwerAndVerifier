@{
    ViewBag.Title = "StlViewer"; 
}

<script src="/Scripts/detector.js"></script>
<script src="/Scripts/stats.js"></script>

<style>
            body {
                margin: 0px;
                padding: 0px;
               overflow: hidden;
            }

            .stlViewerAndVerifier{
                margin-top: 10%;
                margin-left: 10%;
                width: 570px;
                height: 420px;
                border:solid #bababa 2px;
                border-radius: 5px;
                background-color: #e1e1e1;


            }
            .warningLog{
                overflow-y:scroll ;
                position: relative;
                margin-top: 5px;
                margin-left: 10px;
                width: 550px;
                height: 90px;
                border:solid #d1d1d1 1px;
                border-radius: 5px;
                background-color: #F2F2F2;

            }

            .warningLogElement{
                margin-top: 5px;
                margin-left: 5px;
                font-family: "Courier New";
                color: #7b7b7b;
                font-size: 15px;
            }
            .warningLog::-webkit-scrollbar {
                width: 10px;
            }

            .warningLog::-webkit-scrollbar-track {
                -webkit-box-shadow: inset 0 0 7px rgba(0,0,0,0.3);
                border-radius: 10px;
            }

            .warningLog::-webkit-scrollbar-thumb {
                border-radius: 10px;
                -webkit-box-shadow: inset 0 0 7px rgba(0,0,0,0.5);
            }

        </style>

        <script src="Scripts/jQuery/jquery-1.11.1.js" type="text/javascript"></script>
        <script src="Scripts/Three/three.js"></script>
        <script src="Scripts/stats.js"></script>
        <script src="Scripts/detector.js"></script>

<body>


   <script>
        var camera, scene, renderer,
                geometry, material, mesh, light1, stats,
                MeshcenterX, MeshcenterY, MeshcenterZ;

        init();
        animate();


        function init() {

            //Detector.addGetWebGLMessage();
            scene = new THREE.Scene();

            camera = new THREE.PerspectiveCamera(100, window.innerWidth / window.innerHeight, 1, 10000);
            camera.position.z = 70;
            camera.position.y = 20;
            scene.add(camera);

            var directionalLight = new THREE.DirectionalLight(0xffffff);
            directionalLight.position.x = 0;
            directionalLight.position.y = 0;
            directionalLight.position.z = 1;
            directionalLight.position.normalize();
            scene.add(directionalLight);

            var xhr = new XMLHttpRequest();
            xhr.onreadystatechange = function () {
                if (xhr.readyState == 4) {
                    if (xhr.status == 200 || xhr.status == 0) {
                        var rep = xhr.response; // || xhr.mozResponseArrayBuffer;
                        console.log(rep);

                        //  parseStlBinary(rep);  // UNLOCK WHE USE BIN FILE
                        parseStl(xhr.responseText); // UNLOCK WHEN USE ASCII FILE

                        var val = 10;
                        MeshcenterX = val;
                        MeshcenterY = val;
                        MeshcenterZ = val;
                        mesh.position.set(MeshcenterX, MeshcenterY, MeshcenterZ);
                        mesh.geometry.applyMatrix(new THREE.Matrix4().makeTranslation(-MeshcenterX, -MeshcenterY, -MeshcenterZ));

                        mesh.rotation.x = 5;
                        mesh.rotation.z = .25;
                        console.log('done parsing');
                    }
                }
            }
            xhr.onerror = function (e) {
                console.log(e);
            }

            // xhr.open( "GET", 'Octocat-v1.stl', true ); // BIN FILE
            xhr.open("GET", '~/Models/box.stl', true); // ASCII FILE


            // xhr.responseType = "arraybuffer";  // UNLOCK WHE USE BIN FILE
            xhr.setRequestHeader("Accept", "text/plain"); // UNLOCK WHEN USE ASCII FILE
            xhr.setRequestHeader("Content-Type", "text/plain"); // UNLOCK WHEN USE ASCII FILE
            xhr.setRequestHeader('charset', 'x-user-defined'); // UNLOCK WHEN USE ASCII FILE

            xhr.send(null);

            var divForStlView = document.createElement('div')
            divForStlView.className = 'stlViewerAndVerifier'

            var warningLog = document.createElement('div')
            warningLog.className = 'warningLog'


            renderer = new THREE.WebGLRenderer();
            renderer.setSize(550, 300);
            renderer.domElement.style.position = 'relative';
            renderer.domElement.style.border = 'dashed';
            renderer.domElement.style.borderWidth = '1px';
            renderer.domElement.style.borderColor = '#d1d1d1';
            renderer.domElement.style.marginLeft = '10px';
            renderer.domElement.style.marginTop = '10px';
            renderer.domElement.style.background = '#F2F2F2';

            stats = new Stats();
            stats.domElement.style.position = 'absolute';
            stats.domElement.style.marginLeft = '15px';
            stats.domElement.style.marginTop = '15px';

            divForStlView.appendChild(stats.domElement);
            divForStlView.appendChild(renderer.domElement);

            for (var i = 0 ; i < 20; i++) {
                var warningLogElement = document.createElement('div')
                warningLogElement.className = 'warningLogElement';
                warningLogElement.innerHTML = "- Warning message" + i;
                warningLog.appendChild(warningLogElement);
            }

            divForStlView.appendChild(warningLog);

            document.body.appendChild(divForStlView);

        }

        function animate() {

            // note: three.js includes requestAnimationFrame shim
            requestAnimationFrame(animate);
            render();
            stats.update();

        }

        function render() {

            //mesh.rotation.x += 0.01;
            if (mesh) {
                mesh.rotation.z += 0.008;

            }
            //light1.position.z -= 1;

            renderer.render(scene, camera);

        }


        // Notes:
        // - STL file format: http://en.wikipedia.org/wiki/STL_(file_format)
        // - 80 byte unused header
        // - All binary STLs are assumed to be little endian, as per wiki doc
        var parseStlBinary = function (stl) {
            var geo = new THREE.Geometry();
            var dv = new DataView(stl, 80); // 80 == unused header
            var isLittleEndian = true;
            var triangles = dv.getUint32(0, isLittleEndian);

            // console.log('arraybuffer length:  ' + stl.byteLength);
            // console.log('number of triangles: ' + triangles);

            var offset = 4;
            for (var i = 0; i < triangles; i++) {
                // Get the normal for this triangle
                var normal = new THREE.Vector3(
                        dv.getFloat32(offset, isLittleEndian),
                        dv.getFloat32(offset + 4, isLittleEndian),
                        dv.getFloat32(offset + 8, isLittleEndian)
                );
                offset += 12;

                // Get all 3 vertices for this triangle
                for (var j = 0; j < 3; j++) {
                    geo.vertices.push(
                            new THREE.Vector3(
                                    dv.getFloat32(offset, isLittleEndian),
                                    dv.getFloat32(offset + 4, isLittleEndian),
                                    dv.getFloat32(offset + 8, isLittleEndian)
                            )
                    );
                    offset += 12
                }

                // there's also a Uint16 "attribute byte count" that we
                // don't need, it should always be zero.
                offset += 2;

                // Create a new face for from the vertices and the normal
                geo.faces.push(new THREE.Face3(i * 3, i * 3 + 1, i * 3 + 2, normal));
            }

            // The binary STL I'm testing with seems to have all
            // zeroes for the normals, unlike its ASCII counterpart.
            // We can use three.js to compute the normals for us, though,
            // once we've assembled our geometry. This is a relatively
            // expensive operation, but only needs to be done once.
            geo.computeFaceNormals();

            mesh = new THREE.Mesh(
                    geo,
                    // new THREE.MeshNormalMaterial({
                    //     overdraw:true
                    // }
                    new THREE.MeshLambertMaterial({
                        overdraw: true,
                        color: 0xc6c6c6,
                        shading: THREE.FlatShading
                    }
                    ));



            scene.add(mesh);

            stl = null;
        };

        var parseStl = function (stl) {
            var state = '';
            var lines = stl.split('\n');
            var geo = new THREE.Geometry();
            var name, parts, line, normal, done, vertices = [];
            var vCount = 0;
            stl = null;

            for (var len = lines.length, i = 0; i < len; i++) {
                if (done) {
                    break;
                }
                line = trim(lines[i]);
                parts = line.split(' ');
                switch (state) {
                    case '':
                        if (parts[0] !== 'solid') {
                            console.error(line);
                            console.error('Invalid state "' + parts[0] + '", should be "solid"');
                            return;
                        } else {
                            name = parts[1];
                            state = 'solid';
                        }
                        break;
                    case 'solid':
                        if (parts[0] !== 'facet' || parts[1] !== 'normal') {
                            console.error(line);
                            console.error('Invalid state "' + parts[0] + '", should be "facet normal"');
                            return;
                        } else {
                            normal = [
                                parseFloat(parts[2]),
                                parseFloat(parts[3]),
                                parseFloat(parts[4])
                            ];
                            state = 'facet normal';
                        }
                        break;
                    case 'facet normal':
                        if (parts[0] !== 'outer' || parts[1] !== 'loop') {
                            console.error(line);
                            console.error('Invalid state "' + parts[0] + '", should be "outer loop"');
                            return;
                        } else {
                            state = 'vertex';
                        }
                        break;
                    case 'vertex':
                        if (parts[0] === 'vertex') {
                            geo.vertices.push(new THREE.Vector3(
                                    parseFloat(parts[1]),
                                    parseFloat(parts[2]),
                                    parseFloat(parts[3])
                            ));
                        } else if (parts[0] === 'endloop') {
                            geo.faces.push(new THREE.Face3(vCount * 3, vCount * 3 + 1, vCount * 3 + 2, new THREE.Vector3(normal[0], normal[1], normal[2])));
                            vCount++;
                            state = 'endloop';
                        } else {
                            console.error(line);
                            console.error('Invalid state "' + parts[0] + '", should be "vertex" or "endloop"');
                            return;
                        }
                        break;
                    case 'endloop':
                        if (parts[0] !== 'endfacet') {
                            console.error(line);
                            console.error('Invalid state "' + parts[0] + '", should be "endfacet"');
                            return;
                        } else {
                            state = 'endfacet';
                        }
                        break;
                    case 'endfacet':
                        if (parts[0] === 'endsolid') {
                            //mesh = new THREE.Mesh( geo, new THREE.MeshNormalMaterial({overdraw:true}));
                            mesh = new THREE.Mesh(
                                    geo,
                                    new THREE.MeshLambertMaterial({
                                        overdraw: true,
                                        color: 0xaa0000,
                                        shading: THREE.FlatShading
                                    }
                                    ));
                            scene.add(mesh);
                            done = true;
                        } else if (parts[0] === 'facet' && parts[1] === 'normal') {
                            normal = [
                                parseFloat(parts[2]),
                                parseFloat(parts[3]),
                                parseFloat(parts[4])
                            ];
                            if (vCount % 1000 === 0) {
                                console.log(normal);
                            }
                            state = 'facet normal';
                        } else {
                            console.error(line);
                            console.error('Invalid state "' + parts[0] + '", should be "endsolid" or "facet normal"');
                            return;
                        }
                        break;
                    default:
                        console.error('Invalid state "' + state + '"');
                        break;
                }
            }
        };


        function trim(str) {
            str = str.replace(/^\s+/, '');
            for (var i = str.length - 1; i >= 0; i--) {
                if (/\S/.test(str.charAt(i))) {
                    str = str.substring(0, i + 1);
                    break;
                }
            }
            return str;
        }
    </script>


</body>